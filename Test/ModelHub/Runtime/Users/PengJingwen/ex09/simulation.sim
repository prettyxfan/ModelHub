/*
 * $Id:$
 * 
 * Copyright 2007-2011, Olaf David, Colorado State University
 *
 * This file is part of the Object Modeling System OMS.
 *
 * OMS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * OMS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OMS.  If not, see <http://www.gnu.org/licenses/>.
 */
// This is a tests simulation type!
import static oms3.SimBuilder.instance as OMS3

OMS3.tests {
    // the component to test.
    model (classname:"ex09.Component") 

    // Run this test once, the pre closure sets the @In before execution, 
    // the 'post' closure test the @Out after execution.
    test(name:"1: single call", 
          pre: { c ->             // this is a closure, 'c' is the component  
             c.tempC = 30         // fields can bea accessed
          },         
          post:{ c -> 
             assert c.tempF == 86.0    // using groovy;s asserts
//             println c.tempF         // more statements can follow here.
          }
    )

    // Run this test against each input value from 'data'
    test(name:"2: multiple data input", 
          data:['tempC', 1, 2, 3, 5, 6, 7 ],        // data set with inputs
          post:{ c -> 
             print c.tempF
          }
    )

    // Random number generator within the script.
    Random r = new Random()

    // Run this test 100 times, let a single test fail if it runs 
    // longer than 200ms. Create random 'tempC' values from 10 ... 15 degC as input;
    // test if the output falls in a expected range.
    test(name: "3: randomized input", count: 100, timeout:200,
          pre:{ c ->
             c.tempC = 10 + (5 * r.nextDouble())
          },

          post:{ c->
             assert c.tempF > 50 && c.tempF < 59
          }
    )
}
